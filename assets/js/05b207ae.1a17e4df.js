"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[91],{2111:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=t(4848),i=t(8453);const s={sidebar_position:1},o="Quick start with Python \ud83d\udc0d",a={id:"foresight/python/python",title:"Quick start with Python \ud83d\udc0d",description:"Quick start",source:"@site/docs/foresight/python/python.md",sourceDirName:"foresight/python",slug:"/foresight/python/",permalink:"/docs/foresight/python/",draft:!1,unlisted:!1,editUrl:"https://github.com/foreai-co/foreai-co.github.io/docs/foresight/python/python.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Ground Truth Similarity",permalink:"/docs/foresight/metrics/ground_truth_similarity"},next:{title:"Terms and Conditions",permalink:"/docs/terms"}},l={},c=[{value:"Quick start",id:"quick-start",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"quick-start-with-python-",children:"Quick start with Python \ud83d\udc0d"}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Install the package using ",(0,r.jsx)(n.code,{children:"pip"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install fore\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Or download the repo from ",(0,r.jsx)(n.a,{href:"https://github.com/foreai-co/fore/",children:"GitHub"})," and install via ",(0,r.jsx)(n.code,{children:"pip install ."})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Get started with the following lines:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fore.foresight import Foresight\n\nforesight = Foresight(api_token="<YOUR_API_TOKEN>")\n\nforesight.log(query="What is the easiest programming language?",\n              response="Python",\n              contexts=["Python rated the easiest programming language"],\n              tag="my_awesome_experiment")\n\n# You can add more such queries using foresight.log\n# ....\n\nforesight.flush()\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Or alternatively to curate your evalsets and run regular evals against them do:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fore.foresight import EvalRunConfig, Foresight, InferenceOutput, MetricType\n\nforesight = Foresight(api_token="<YOUR_API_TOKEN>")\n\nevalset = foresight.create_simple_evalset(\n    evalset_id="programming-languages",\n    queries=["hardest programming language?", "easiest programming language?"],\n    reference_answers=["Malbolge", "Python"])\n\nrun_config = EvalRunConfig(evalset_id="programming-languages",\n                        experiment_id="my-smart-llm",\n                        metrics=[MetricType.GROUNDEDNESS, MetricType.REFERENCE_FACT_RECALL])\n\n\ndef my_generate_fn(query: str) -> InferenceOutput:\n    # Do the LLM processing with your model...\n    # Here is some demo code:\n    return InferenceOutput(\n        generated_response="Malbolge" if "hardest" in query else "Python",\n        contexts=[\n            "Malbolge is the hardest language", "Python is the easiest language"\n        ])\n\nforesight.generate_answers_and_run_eval(my_generate_fn, run_config)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If you have already run a one-off eval run that includes reference answers or\ncontexts, you can use a single command to upload the evalset, the generated answers\nand kick off an evalrun:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fore.foresight import EvalRunConfig, Foresight, InferenceOutput, MetricType\nfrom datetime import datetime\n\nforesight = Foresight(api_token="<YOUR_API_TOKEN>")\n\nformatted_time = datetime.utcnow().strftime(\'%Y%m%d-%H%M%S\')\n\nrun_config = EvalRunConfig(evalset_id=f"programming-languages-{formatted_time}",\n                           experiment_id=f"my-experiment-{formatted_time}",\n                           metrics=[MetricType.REFERENCE_FACT_RECALL])\n    \nforesight.create_simple_evalrun(\n    run_config=run_config,\n    queries=["hardest programming language?", "easiest programming language?"],\n    answers=[\n        "The hardest programming language is Malbolge",\n        "The easiest programming language is Python"\n    ],\n    reference_answers=["Malbolge", "Python"])\n'})}),"\n"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);